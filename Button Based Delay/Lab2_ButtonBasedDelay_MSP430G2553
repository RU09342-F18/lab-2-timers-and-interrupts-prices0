#include <msp430.h> 


/**
 * main.c
 */
void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	BCSCTL3 = LFXT1S_2; //enables crystals for higher efficiency

	P1DIR |= BIT0; //P1.0 is an output
	P1OUT |= BIT0; //Sets P1.0 on

	P1DIR &= ~BIT3; //makes p1.3 an input
	P1OUT |= BIT3; //sets pullup resistor
	P1REN |= BIT3; //enables pullup resistor

	TA0CTL = TASSEL_1 + MC_1 + ID_3; //Makes Aclk in up mode with an 8 divider
	CCTL0 = CCIE; //enables the interrupt
	CCR0 =500; //count to have led blink at
	P1IE |= BIT3; //interrupt
	P1IES |=BIT3; //sets interrupted for the positive clock edge
	P1IFG &= ~BIT3; //cleears the interrupt flags
	_BIS_SR(LPM0_bits + GIE); //low power mode and global interrupt
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0 (void)
{
    P1OUT ^=BIT0; //toggles P1.0
}
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if(P1IES & BIT3) //condition if button is pressed
        {
           P1IES &= ~BIT3; //interrupt on the clock edge, negative
           TA0CTL = TACLR; //clears the time to begin counting
           TA0CTL = TASSEL_1 + MC_2 + ID_3; //sets timer as ACLK in cont mode with an 8 divider
        }
        else
        {
           TA0CTL = MC_0;//stops the timer
           CCR0 = TA0R; //changes up timer count range to length of time button was pressed
           TA0CTL = TACLR; //clears the timer
           TA0CTL = TASSEL_1 + MC_1 + ID_3; //Makes Aclk in up mode with an 8 divider
           P1IES |=BIT3; //sets a positive clock edge interrupt

        }
    P1IFG &=~ BIT3; //resets interrupt flag
}
	
